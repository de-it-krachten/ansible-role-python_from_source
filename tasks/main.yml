---

- name: Load variables based on OS type
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "family-{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "family-{{ ansible_os_family }}.yml"
        - default.yml
      paths:
        - 'vars'

- name: Test if python {{ python_version_minor }} is installed
  command: "{{ python_binary }} --version"
  register: python_bin
  changed_when: no
  failed_when: no
  check_mode: no
  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}

- name: Set python version installed
  set_fact:
    python_installed: "{{ python_bin.stdout.split(' ')[1] if (python_bin.stdout is defined and python_bin.stdout|length > 0) else 'none' }}"


- name: Display python version found
  debug:
    msg:
      - "python {{ python_version_minor }} version installed : {{ python_installed }}"
      - "python {{ python_version_minor }} version required  : {{ python_version }}"

- block:

    - name: Install all required packages
      package:
        name: "{{ item }}"
        state: present
      loop: "{{ python_packages }}"

    - name: Download python
      unarchive:
        src: "{{ python_url }}"
        dest: /opt
        remote_src: true

    - name: Compile python  # noqa no-changed-when
      shell: |
        cd /opt/Python-{{ python_version }}
        ./configure --enable-optimizations
        make altinstall

  when: python_installed == 'none' or python_installed is version(python_version, '<')
